---
layout: post
title:      "Rails Project"
date:       2020-05-10 19:03:58 +0000
permalink:  rails_project
---


For the rails project, I started thinking of what I would like to do a few weeks ago and maybe this was the problem I faced. My original idea was an issue I would face almost every day at work: taking an average 25-page documents and extracting text from them. After working with Ruby for a little while now, I thought I could definitely find a Ruby gem that would work for .pdf data parsing. I investigated a few gems but found that PDF::Reader was the most widely used and the functionality seemed good *at the time*, where I did my testing in a file called test.rb.

I had found a few solutions to this problem using Python, but not as many using the Ruby language. I messed around with this gem for a little while and was able to extract page level text from the .pdf document that I wanted. I was able to find income category titles from a .pdf schedule K-1, a document I am too familiar with from my previous role in accounting. The problem with this was that I could not retrieve the filled-in form data. I was able to discuss with my cohort lead and another student about regex in order to strip whitespace between characters. However, this ended up sorting the text data out of order and I couldn’t look up specific details - for example (line 1 ordinary income as a key and find the associated value of $333). There was a hash method you could call on the .pdf object which seemed to very close, but this approach was just too time consuming for this project. Instead, I decided to change gears and unfortunately ended up losing ground.

Prior to joining Flatiron School, one of the biggest frustrations I had day to day was having a clear way to organize relationships between myself, colleagues and clients, particularly when there can be very complex relationships for hundreds of investment funds. Most of the time you would receive client files that were generated by an ERP that wrote to Excel or CSV format and obviously this created a lot of issues when it came to processing tax returns or preparing financial information for clients. When I read into the requirements for the Rails project, I thought this would be a great use case to help bring structure to the chaos typically associated with my old role. While I had financial services/accounting in mind, this model could easily be applied to any service relationship with clients and teams. I decided for this project to attempt to create a tracking system for users, their clients, and the investments that joined them. So in my case - I had a User model, a Client model and Investment model. I created a has-many-through for users and clients – meaning a user has many clients through investments and a client has many users through investments.

The other aspect of this project that took a lot of time was getting Active Storage set up. I ended up using CarrieWave gem for awhile, just because there was a lot of documentation on this. It worked but I had seen that Active Storage started being added to Rails in version 5.1 or 5.2 and since I'm using 6.0.3, seemed like Active Storage was the best option. Uploading documents which was the original idea of this project and (still may add this later) was key to getting this working. I wanted users (accountants/admins) to be able to view the .pdf document they uploaded. After deliberating about this for a few days I needed to move on. I was able though to create a s3 AWS bucket for storage purposes connected to PostgreSQL database. I was able to upload to the Active Storage blob and save because I could see in my terminal as I created my investment post with attached document. I could see it worked based on the storage folder in my Rails app there was a strange text file that contained the pdf info. However, after attempting to preview my file or using link to - I couldn't find the attachment path (I even added the has_one_attached macro and permitted through strong params in my investments params helper method). I attempted using url_for but there were too many issues and had to keep moving on. If I had more time, I may consider iframe if I decide to adjust this.

So after these two difficulties, I tried to put together what I had. Some of the other issues were - getting OmniAuth in GitHub to work with password_confirmation, properly associating the users, clients and investments without nesting these routes too deep. Still a work in progress. I am looking forward to learning more as I can't believe how far I've come in this course. I never thought I could learn this much in such a short time. I have great respect for the students in this course and the instructors who teach it. 

 


 


